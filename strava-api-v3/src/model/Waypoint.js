/*
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * OpenAPI spec version: 3.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/LatLng'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./LatLng'));
  } else {
    // Browser globals (root is window)
    if (!root.StravaApiV3) {
      root.StravaApiV3 = {};
    }
    root.StravaApiV3.Waypoint = factory(root.StravaApiV3.ApiClient, root.StravaApiV3.LatLng);
  }
}(this, function(ApiClient, LatLng) {
  'use strict';

  /**
   * The Waypoint model module.
   * @module model/Waypoint
   * @version 3.0.0
   */

  /**
   * Constructs a new <code>Waypoint</code>.
   * @alias module:model/Waypoint
   * @class
   */
  var exports = function() {
  };

  /**
   * Constructs a <code>Waypoint</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Waypoint} obj Optional instance to populate.
   * @return {module:model/Waypoint} The populated <code>Waypoint</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('latlng'))
        obj.latlng = LatLng.constructFromObject(data['latlng']);
      if (data.hasOwnProperty('target_latlng'))
        obj.targetLatlng = LatLng.constructFromObject(data['target_latlng']);
      if (data.hasOwnProperty('categories'))
        obj.categories = ApiClient.convertToType(data['categories'], ['String']);
      if (data.hasOwnProperty('title'))
        obj.title = ApiClient.convertToType(data['title'], 'String');
      if (data.hasOwnProperty('description'))
        obj.description = ApiClient.convertToType(data['description'], 'String');
      if (data.hasOwnProperty('distance_into_route'))
        obj.distanceIntoRoute = ApiClient.convertToType(data['distance_into_route'], 'Number');
    }
    return obj;
  }

  /**
   * The location along the route that the waypoint is closest to
   * @member {module:model/LatLng} latlng
   */
  exports.prototype.latlng = undefined;

  /**
   * A location off of the route that the waypoint is (optional)
   * @member {module:model/LatLng} targetLatlng
   */
  exports.prototype.targetLatlng = undefined;

  /**
   * Categories that the waypoint belongs to
   * @member {Array.<String>} categories
   */
  exports.prototype.categories = undefined;

  /**
   * A title for the waypoint
   * @member {String} title
   */
  exports.prototype.title = undefined;

  /**
   * A description of the waypoint (optional)
   * @member {String} description
   */
  exports.prototype.description = undefined;

  /**
   * The number meters along the route that the waypoint is located
   * @member {Number} distanceIntoRoute
   */
  exports.prototype.distanceIntoRoute = undefined;


  return exports;

}));
